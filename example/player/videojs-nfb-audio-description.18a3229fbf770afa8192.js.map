{"version":3,"sources":["webpack://NFBWebPlayer/./src/plugins/NFBAudioDescription.js"],"names":["Plugin","videojs","defaults","source","dvSource","vhs","withCredentials","NFBAudioDescription","player","options","log","level","button","toggleSource","bind","dvPlaying","ready","init","this","addButton","controlBar","addChild","addClass","controlText","localize","on","currentTime","isPaused","paused","removeClass","one","play","pause","setTimeout","poster","getTypeFromSource","src","type","defaultState","VERSION"],"mappings":"opBAGA,IAAMA,EAASC,oBAAkB,UAG3BC,EAAW,CACfC,OAAQ,KACRC,SAAU,KACVC,IAAK,CACHC,iBAAiB,IASfC,E,oCAcJ,WAAaC,EAAQC,GAAS,6BAE5B,cAAMD,IACDE,IAAIC,MAAMV,uBAEf,EAAKQ,QAAUR,uBAAqBC,EAAUO,GAC9C,EAAKG,OAAS,KACd,EAAKC,aAAe,EAAKA,aAAaC,MAAlB,WACpB,EAAKC,WAAY,EAEjB,EAAKP,OAAOQ,OAAM,WAChB,EAAKC,UAXqB,E,mCAe9B,WACEC,KAAKR,IAAI,6CACTQ,KAAKC,c,uBAGP,WACED,KAAKN,OAASM,KAAKV,OAAOY,WAAWC,SAAS,UAC9CH,KAAKN,OAAOU,SAAS,gCACrBJ,KAAKN,OAAOW,YAAYL,KAAKN,OAAOY,SAAS,sBAC7CN,KAAKN,OAAOa,GAAG,QAASP,KAAKL,cAC7BK,KAAKN,OAAOa,GAAG,MAAOP,KAAKL,gB,0BAG7B,WAAgB,WACdK,KAAKR,IAAI,iBACTQ,KAAKH,WAAaG,KAAKH,UACvB,IAAMW,EAAcR,KAAKV,OAAOkB,cAC1BC,EAAWT,KAAKV,OAAOoB,SACvBzB,EAASe,KAAKH,UAAYG,KAAKT,QAAQL,SAAWc,KAAKT,QAAQN,OACjEe,KAAKH,UACPG,KAAKN,OAAOU,SAAS,cAErBJ,KAAKN,OAAOiB,YAAY,cAI1BX,KAAKV,OAAOsB,IAAI,kBAAkB,WAEhC,EAAKtB,OAAOuB,OACRJ,GACF,EAAKnB,OAAOwB,QAEd,EAAKxB,OAAOkB,YAAYA,GAExBO,YAAW,WACT,EAAKzB,OAAO0B,OAAOA,KAClB,QAIL,IAAMA,EAAShB,KAAKV,OAAO0B,SAK3B,OAJAhB,KAAKV,OAAO0B,OAAO,OAGAC,OAAkBhC,IAErC,IAAK,MACHe,KAAKV,OAAO4B,IAAIjC,GAChB,MAEF,IAAK,MACHe,KAAKV,OAAO4B,IAAI,CACdA,IAAKjC,EACLkC,KAAM,wBACN/B,gBAAiBY,KAAKT,QAAQJ,IAAIC,uB,GAnFRN,GA2FlCO,EAAoB+B,aAAe,GAGnC/B,EAAoBgC,QAAU,QAG9BtC,yBAAuB,sBAAuBM,GAE9C","file":"videojs-nfb-audio-description.18a3229fbf770afa8192.js","sourcesContent":["import videojs from 'video.js'\nimport { getTypeFromSource } from '@src/utils'\n\nconst Plugin = videojs.getPlugin('plugin')\n\n// Default options for the plugin.\nconst defaults = {\n  source: null,\n  dvSource: null,\n  vhs: {\n    withCredentials: false\n  }\n}\n\n/**\n * An advanced Video.js plugin. For more information on the API\n *\n * See: https://blog.videojs.com/feature-spotlight-advanced-plugins/\n */\nclass NFBAudioDescription extends Plugin {\n  /**\n   * Create a NFBAudioDescription plugin instance.\n   *\n   * @param  {Player} player\n   *         A Video.js Player instance.\n   *\n   * @param  {Object} [options]\n   *         An optional options object.\n   *\n   *         While not a core part of the Video.js plugin architecture, a\n   *         second argument of options is a convenient way to accept inputs\n   *         from your plugin's caller.\n   */\n  constructor (player, options) {\n    // the parent class will add player under this.player\n    super(player)\n    this.log.level(videojs.log.level())\n\n    this.options = videojs.mergeOptions(defaults, options)\n    this.button = null\n    this.toggleSource = this.toggleSource.bind(this)\n    this.dvPlaying = false\n\n    this.player.ready(() => {\n      this.init()\n    })\n  }\n\n  init () {\n    this.log('Initializing NFB Audio Description plugin')\n    this.addButton()\n  }\n\n  addButton () {\n    this.button = this.player.controlBar.addChild('button')\n    this.button.addClass('vjs-audio-description-button')\n    this.button.controlText(this.button.localize('Audio Description'))\n    this.button.on('click', this.toggleSource)\n    this.button.on('tap', this.toggleSource)\n  }\n\n  toggleSource () {\n    this.log('Toggle source')\n    this.dvPlaying = !this.dvPlaying\n    const currentTime = this.player.currentTime()\n    const isPaused = this.player.paused()\n    const source = this.dvPlaying ? this.options.dvSource : this.options.source\n    if (this.dvPlaying) {\n      this.button.addClass('dv-playing')\n    } else {\n      this.button.removeClass('dv-playing')\n    }\n\n    // Add one time listener to set position to where it was when new source will be loaded\n    this.player.one('loadedmetadata', () => {\n      // We need to play once even if player was paused to remove \"pre play\" layout\n      this.player.play()\n      if (isPaused) {\n        this.player.pause()\n      }\n      this.player.currentTime(currentTime)\n      // Kind of hacky (we want to wait for film really playing)\n      setTimeout(() => {\n        this.player.poster(poster)\n      }, 500)\n    })\n\n    // remove poster to prevent screen glitch\n    const poster = this.player.poster()\n    this.player.poster(null)\n\n    // update source\n    const sourceType = getTypeFromSource(source)\n    switch (sourceType) {\n    case 'mp4':\n      this.player.src(source)\n      break\n\n    case 'hls':\n      this.player.src({\n        src: source,\n        type: 'application/x-mpegURL',\n        withCredentials: this.options.vhs.withCredentials\n      })\n      break\n    }\n  }\n}\n\n// Define default values for the plugin's `state` object here.\nNFBAudioDescription.defaultState = {}\n\n// Include the version number.\nNFBAudioDescription.VERSION = '1.0.0'\n\n// Register the plugin with video.js.\nvideojs.registerPlugin('nfbAudioDescription', NFBAudioDescription)\n\nexport default NFBAudioDescription\n"],"sourceRoot":""}