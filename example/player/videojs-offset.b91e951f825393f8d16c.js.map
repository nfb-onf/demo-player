{"version":3,"sources":["webpack://NFBWebPlayer/./node_modules/videojs-offset/dist/videojs-offset.es.js"],"names":["defaults","registerPlugin","onPlayerTimeUpdate","_this","this","curr","currentTime","play","_offsetEnd","_offsetStart","off","pause","trigger","one","on","_restartBeginning","offset","options","_this2","Player","constructor","parseFloat","start","end","restart_beginning","__super__","__offsetInit","duration","prototype","bufferedPercent","remainingTime","buffered","undefined","apply","arguments","seconds","call","t","getCache","startOffset","endOffset","buff","ranges","i","length","Math","max","min","ready","player","VERSION"],"mappings":";uJAKIA,EAAW,GAEXC,EAAiB,0BAA0B,iBAS3CC,EAAqB,SAASA,IAChC,IAAIC,EAAQC,KAERC,EAAOD,KAAKE,cAEZD,EAAO,IACTD,KAAKE,YAAY,GACjBF,KAAKG,QAGHH,KAAKI,WAAa,GAAKH,EAAOD,KAAKI,WAAaJ,KAAKK,eACvDL,KAAKM,IAAI,aAAcR,GACvBE,KAAKO,QACLP,KAAKQ,QAAQ,SAEbR,KAAKS,IAAI,QAAQ,WACfV,EAAMW,GAAG,aAAcZ,MAGpBE,KAAKW,mBAGRX,KAAKQ,QAAQ,aACbR,KAAKE,YAAY,IAHjBF,KAAKE,YAAYF,KAAKI,WAAaJ,KAAKK,gBAyC1CO,EAAS,SAAgBC,GAC3B,IAAIC,EAASd,KAEba,EAAUA,GAAW,GACrB,IAAIE,EAASf,KAAKgB,YAClBhB,KAAKK,aAAeY,WAAWJ,EAAQK,OAAS,KAChDlB,KAAKI,WAAaa,WAAWJ,EAAQM,KAAO,KAC5CnB,KAAKW,kBAAoBE,EAAQO,oBAAqB,EAEjDL,EAAOM,WAAcN,EAAOM,UAAUC,eACzCP,EAAOM,UAAY,CACjBC,cAAc,EACdC,SAAUR,EAAOS,UAAUD,SAC3BrB,YAAaa,EAAOS,UAAUtB,YAC9BuB,gBAAiBV,EAAOS,UAAUC,gBAClCC,cAAeX,EAAOS,UAAUE,cAChCC,SAAUZ,EAAOS,UAAUG,UAG7BZ,EAAOS,UAAUD,SAAW,WAC1B,YAAwBK,IAApB5B,KAAKI,iBAAkDwB,IAAtB5B,KAAKK,aACpCL,KAAKI,WAAa,EACbJ,KAAKI,WAAaJ,KAAKK,aAGzBU,EAAOM,UAAUE,SAASM,MAAM7B,KAAM8B,WAAa9B,KAAKK,aAG1DU,EAAOM,UAAUE,SAASM,MAAM7B,KAAM8B,YAG/Cf,EAAOS,UAAUtB,YAAc,SAAU6B,GACvC,QAAgBH,IAAZG,EACF,YAA0BH,IAAtB5B,KAAKK,aACAU,EAAOM,UAAUnB,YAAY8B,KAAKhC,KAAM+B,EAAU/B,KAAKK,cAGzDU,EAAOM,UAAUnB,YAAY8B,KAAKhC,KAAM+B,GAGjD,QAA0BH,IAAtB5B,KAAKK,aAA4B,CACnC,IAAI4B,EAAIlB,EAAOM,UAAUnB,YAAY2B,MAAM7B,MAAQA,KAAKK,aAGxD,OADAL,KAAKkC,WAAWhC,YAAc+B,EACvBA,EAGT,OAAOlB,EAAOM,UAAUnB,YAAY2B,MAAM7B,OAG5Ce,EAAOS,UAAUE,cAAgB,WAC/B,OAAO1B,KAAKuB,WAAavB,KAAKE,eAGhCa,EAAOS,UAAUW,YAAc,WAC7B,OAAOnC,KAAKK,cAGdU,EAAOS,UAAUY,UAAY,WAC3B,OAAIpC,KAAKI,WAAa,EACbJ,KAAKI,WAGPJ,KAAKuB,YAGdR,EAAOS,UAAUG,SAAW,WAK1B,IAJA,IAAIU,EAAOtB,EAAOM,UAAUM,SAASK,KAAKhC,MAEtCsC,EAAS,GAEJC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BD,EAAOC,GAAK,CAACE,KAAKC,IAAI,EAAGL,EAAKnB,MAAMqB,GAAKvC,KAAKK,cAAeoC,KAAKE,IAAIF,KAAKC,IAAI,EAAGL,EAAKlB,IAAIoB,GAAKvC,KAAKK,cAAeL,KAAKuB,aAG3H,OAAO,2BAAyBe,KAIpCtC,KAAK4C,OAAM,WAlGO,IAAuBC,IAmGzB/B,EAAQ,uBAAqBlB,EAAUiB,GAlGvDgC,EAAOpC,IAAI,QAAQ,WACjBoC,EAAOnC,GAAG,aAAcZ,UAsG5BD,EAAe,SAAUe,GAEzBA,EAAOkC,QAjKO,QAmKd","file":"videojs-offset.b91e951f825393f8d16c.js","sourcesContent":["/*! @name videojs-offset @version 2.1.3 @license MIT */\nimport videojs from 'video.js';\n\nvar version = \"2.1.3\";\n\nvar defaults = {}; // Cross-compatibility for Video.js 5 and 6.\n\nvar registerPlugin = videojs.registerPlugin || videojs.plugin; // const dom = videojs.dom || videojs;\n\n/**\n * Checks whether the clip should be ended.\n *\n * @function onPlayerTimeUpdate\n *\n */\n\nvar onPlayerTimeUpdate = function onPlayerTimeUpdate() {\n  var _this = this;\n\n  var curr = this.currentTime();\n\n  if (curr < 0) {\n    this.currentTime(0);\n    this.play();\n  }\n\n  if (this._offsetEnd > 0 && curr > this._offsetEnd - this._offsetStart) {\n    this.off('timeupdate', onPlayerTimeUpdate);\n    this.pause();\n    this.trigger('ended'); // Re-bind to timeupdate next time the video plays\n\n    this.one('play', function () {\n      _this.on('timeupdate', onPlayerTimeUpdate);\n    });\n\n    if (!this._restartBeginning) {\n      this.currentTime(this._offsetEnd - this._offsetStart);\n    } else {\n      this.trigger('loadstart');\n      this.currentTime(0);\n    }\n  }\n};\n/**\n * Function to invoke when the player is ready.\n *\n * This is a great place for your plugin to initialize itself. When this\n * function is called, the player will have its DOM and child components\n * in place.\n *\n * @function onPlayerReady\n * @param    {Player} player\n *           A Video.js player.\n * @param    {Object} [options={}]\n *           An object of options left to the plugin author to define.\n */\n\n\nvar onPlayerReady = function onPlayerReady(player, options) {\n  player.one('play', function () {\n    player.on('timeupdate', onPlayerTimeUpdate);\n  });\n};\n/**\n * A video.js plugin.\n *\n * In the plugin function, the value of `this` is a video.js `Player`\n * instance. You cannot rely on the player being in a \"ready\" state here,\n * depending on how the plugin is invoked. This may or may not be important\n * to you; if not, remove the wait for \"ready\"!\n *\n * @function offset\n * @param    {Object} [options={}]\n *           An object of options left to the plugin author to define.\n */\n\n\nvar offset = function offset(options) {\n  var _this2 = this;\n\n  options = options || {};\n  var Player = this.constructor;\n  this._offsetStart = parseFloat(options.start || '0');\n  this._offsetEnd = parseFloat(options.end || '0');\n  this._restartBeginning = options.restart_beginning || false;\n\n  if (!Player.__super__ || !Player.__super__.__offsetInit) {\n    Player.__super__ = {\n      __offsetInit: true,\n      duration: Player.prototype.duration,\n      currentTime: Player.prototype.currentTime,\n      bufferedPercent: Player.prototype.bufferedPercent,\n      remainingTime: Player.prototype.remainingTime,\n      buffered: Player.prototype.buffered\n    };\n\n    Player.prototype.duration = function () {\n      if (this._offsetEnd !== undefined && this._offsetStart !== undefined) {\n        if (this._offsetEnd > 0) {\n          return this._offsetEnd - this._offsetStart;\n        }\n\n        return Player.__super__.duration.apply(this, arguments) - this._offsetStart;\n      }\n\n      return Player.__super__.duration.apply(this, arguments);\n    };\n\n    Player.prototype.currentTime = function (seconds) {\n      if (seconds !== undefined) {\n        if (this._offsetStart !== undefined) {\n          return Player.__super__.currentTime.call(this, seconds + this._offsetStart);\n        }\n\n        return Player.__super__.currentTime.call(this, seconds);\n      }\n\n      if (this._offsetStart !== undefined) {\n        var t = Player.__super__.currentTime.apply(this) - this._offsetStart;\n\n        this.getCache().currentTime = t;\n        return t;\n      }\n\n      return Player.__super__.currentTime.apply(this);\n    };\n\n    Player.prototype.remainingTime = function () {\n      return this.duration() - this.currentTime();\n    };\n\n    Player.prototype.startOffset = function () {\n      return this._offsetStart;\n    };\n\n    Player.prototype.endOffset = function () {\n      if (this._offsetEnd > 0) {\n        return this._offsetEnd;\n      }\n\n      return this.duration();\n    };\n\n    Player.prototype.buffered = function () {\n      var buff = Player.__super__.buffered.call(this);\n\n      var ranges = [];\n\n      for (var i = 0; i < buff.length; i++) {\n        ranges[i] = [Math.max(0, buff.start(i) - this._offsetStart), Math.min(Math.max(0, buff.end(i) - this._offsetStart), this.duration())];\n      }\n\n      return videojs.createTimeRanges(ranges);\n    };\n  }\n\n  this.ready(function () {\n    onPlayerReady(_this2, videojs.mergeOptions(defaults, options));\n  });\n}; // Register the plugin with video.js.\n\n\nregisterPlugin('offset', offset); // Include the version number.\n\noffset.VERSION = version;\n\nexport default offset;\n"],"sourceRoot":""}