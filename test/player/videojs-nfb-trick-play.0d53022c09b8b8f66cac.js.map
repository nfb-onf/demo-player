{"version":3,"sources":["webpack://NFBWebPlayer/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://NFBWebPlayer/./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://NFBWebPlayer/./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://NFBWebPlayer/./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://NFBWebPlayer/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://NFBWebPlayer/./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://NFBWebPlayer/./src/plugins/NFBTrickPlay.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_toConsumableArray","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","Plugin","videojs","defaults","source","NFBTrickPlay","player","options","log","level","sprites","basePath","substring","lastIndexOf","imagePathPrefix","init","this","loadSourceM3u8","sourceData","imageStreamURI","getImageStreamURI","loadImageStreamM3u8","imageStreamData","getSpritesFromImageStream","ready","then","thumbnailSprite","message","url","axios","r","data","catch","e","matches","match","Error","path","regex","matchAll","map","groups","filename","start","duration","parseInt","interval","width","height","defaultState","VERSION"],"mappings":"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","file":"videojs-nfb-trick-play.0d53022c09b8b8f66cac.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import axios from 'axios'\nimport videojs from 'video.js'\n\nconst Plugin = videojs.getPlugin('plugin')\n\n// Default options for the plugin.\nconst defaults = {\n  source: null // required\n}\n\n/**\n * An advanced Video.js plugin. For more information on the API\n *\n * See: https://blog.videojs.com/feature-spotlight-advanced-plugins/\n */\nclass NFBTrickPlay extends Plugin {\n  /**\n   * Create a NFBTrickPlay plugin instance.\n   *\n   * @param  {Player} player\n   *         A Video.js Player instance.\n   *\n   * @param  {Object} [options]\n   *         An optional options object.\n   *\n   *         While not a core part of the Video.js plugin architecture, a\n   *         second argument of options is a convenient way to accept inputs\n   *         from your plugin's caller.\n   */\n  constructor (player, options) {\n    // the parent class will add player under this.player\n    super(player)\n    this.log.level(videojs.log.level())\n\n    this.options = videojs.mergeOptions(defaults, options)\n    this.sprites = []\n    this.basePath = this.options.source.substring(0, this.options.source.lastIndexOf('/')) + '/'\n    this.imagePathPrefix = ''\n\n    this.init()\n  }\n\n  async init () {\n    this.log('Initializing NFB Trick Play plugin')\n    try {\n      const sourceData = await this.loadSourceM3u8(this.options.source)\n      const imageStreamURI = this.getImageStreamURI(sourceData)\n      const imageStreamData = await this.loadImageStreamM3u8(imageStreamURI)\n      this.sprites = this.getSpritesFromImageStream(imageStreamData)\n      this.log('Sprites', this.sprites)\n\n      if (this.sprites.length) {\n        this.player.ready(() => {\n          import(/* webpackChunkName: \"videojs-thumbnail-sprite\" */ 'videojs-thumbnail-sprite').then(() => {\n            this.player.thumbnailSprite({\n              sprites: this.sprites\n            })\n          })\n        })\n      }\n    } catch (e) {\n      this.log(e.message)\n    }\n  }\n\n  async loadSourceM3u8 (url) {\n    this.log('Loading source file')\n    return axios.get(url)\n      .then(r => r.data)\n      .catch(e => {\n        return `Unable to load source file: ${e}.`\n      })\n  }\n\n  getImageStreamURI (data) {\n    this.log('Get Image Stream URI')\n    const matches = data.match(/#EXT-X-IMAGE-STREAM-INF:.*,URI=\"(.*)\"/)\n    if (!matches) {\n      throw new Error('No image stream URI found')\n    }\n\n    const path = matches[1]\n    this.imagePathPrefix = path.substring(0, path.lastIndexOf('/')) + '/'\n\n    return this.basePath + path\n  }\n\n  async loadImageStreamM3u8 (url) {\n    this.log('Loading image stream file')\n    return axios.get(url)\n      .then(r => r.data)\n      .catch(e => {\n        return `Unable to load image stream file: ${e}.`\n      })\n  }\n\n  getSpritesFromImageStream (data) {\n    this.log('Get sprites from image stream')\n    const regex = /(#EXTINF:(?<duration>[0-9.]*),\\n#EXT-X-TILES:RESOLUTION=(?<width>[0-9]*)x(?<height>[0-9]*),LAYOUT=([0-9]*)x([0-9]*),DURATION=(?<interval>[0-9.]*)\\n(?<filename>.*\\.jpg))/g\n    const matches = [...data.matchAll(regex)]\n\n    const sprites = matches.map((match, i) => ({\n      url: this.basePath + this.imagePathPrefix + match.groups.filename,\n      start: i * match.groups.duration,\n      duration: parseInt(match.groups.duration),\n      interval: parseInt(match.groups.interval),\n      width: parseInt(match.groups.width),\n      height: parseInt(match.groups.height)\n    }))\n\n    return sprites\n  }\n}\n\n// Define default values for the plugin's `state` object here.\nNFBTrickPlay.defaultState = {}\n\n// Include the version number.\nNFBTrickPlay.VERSION = '1.0.0'\n\n// Register the plugin with video.js.\nvideojs.registerPlugin('nfbTrickPlay', NFBTrickPlay)\n\nexport default NFBTrickPlay\n"],"sourceRoot":""}