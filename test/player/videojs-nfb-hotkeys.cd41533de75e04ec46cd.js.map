{"version":3,"sources":["webpack://NFBWebPlayer/./src/plugins/NFBHotKeys.js"],"names":["Plugin","videojs","defaults","autofocus","NFBHotKeys","player","options","log","level","keyDown","bind","ready","init","this","on","focus","e","evt","window","event","charCode","keyCode","which","controls","activeEl","document","activeElement","el","querySelector","applyHotkeyAction","preventDefault","keyId","ePreventDefault","wasPlaying","seekTime","duration","paused","silencePromise","play","pause","isFullscreen","exitFullscreen","requestFullscreen","muted","currentTime","volume","value","then","defaultState","VERSION"],"mappings":"0oBAEA,IAAMA,EAASC,oBAAkB,UAG3BC,EAAW,CACfC,WAAW,GAQPC,E,oCAcJ,WAAaC,EAAQC,GAAS,6BAE5B,cAAMD,IACDE,IAAIC,MAAMP,uBAEf,EAAKK,QAAUL,uBAAqBC,EAAUI,GAC9C,EAAKG,QAAU,EAAKA,QAAQC,MAAb,WAEf,EAAKL,OAAOM,OAAM,WAChB,EAAKC,UATqB,E,mCAa9B,WACEC,KAAKN,IAAI,oCAGTM,KAAKR,OAAOS,GAAG,UAAWD,KAAKJ,SAE3BI,KAAKP,QAAQH,WACfU,KAAKR,OAAOU,U,qBAIhB,SAASC,GACP,IAAMC,EAAMD,GAAKE,OAAOC,MAClBC,EAAWH,EAAII,SAAWJ,EAAIK,MAGpC,GAAIT,KAAKR,OAAOkB,WAAY,CAC1B,IAAMC,EAAWC,SAASC,cACtBF,IAAaX,KAAKR,OAAOsB,MACzBH,IAAaX,KAAKR,OAAOsB,KAAKC,cAAc,cAC5CJ,IAAaX,KAAKR,OAAOsB,KAAKC,cAAc,qBAC5CJ,IAAaX,KAAKR,OAAOsB,KAAKC,cAAc,oBAC9Cf,KAAKN,IAAL,oBAAsBa,IACtBP,KAAKgB,kBAAkBT,EAAUH,EAAIa,eAAepB,KAAKO,Q,+BAK/D,SAAmBc,EAAOC,GACxB,IAAIC,EAAYC,EACVC,EAAWtB,KAAKR,OAAO8B,WAG7B,OAFAH,IAEQD,GAER,KAAK,GACHlB,KAAKN,IAAI,uBACLM,KAAKR,OAAO+B,SACdvB,KAAKwB,eAAexB,KAAKR,OAAOiC,QAEhCzB,KAAKR,OAAOkC,QAEd,MAEF,KAAK,GACH1B,KAAKN,IAAI,oBACLM,KAAKR,OAAOmC,eACd3B,KAAKR,OAAOoC,iBAEZ5B,KAAKR,OAAOqC,oBAEd,MAEF,KAAK,GACH7B,KAAKN,IAAI,uBACTM,KAAKR,OAAOsC,OAAO9B,KAAKR,OAAOsC,SAC/B,MAEF,KAAK,GACH9B,KAAKN,IAAI,iCACT0B,GAAcpB,KAAKR,OAAO+B,WAExBvB,KAAKR,OAAOkC,SAEdL,EAAWrB,KAAKR,OAAOuC,cAAgB,IAEvB,IACdV,EAAW,GAEbrB,KAAKR,OAAOuC,YAAYV,GACpBD,GACFpB,KAAKwB,eAAexB,KAAKR,OAAOiC,QAElC,MAEF,KAAK,GACHzB,KAAKN,IAAI,2BACT0B,GAAcpB,KAAKR,OAAO+B,WAExBvB,KAAKR,OAAOkC,SAEdL,EAAWrB,KAAKR,OAAOuC,cAAgB,IAEvBT,IACdD,EAAWD,EAAaE,EAAW,KAAQA,GAE7CtB,KAAKR,OAAOuC,YAAYV,GACpBD,GACFpB,KAAKwB,eAAexB,KAAKR,OAAOiC,QAElC,MAEF,KAAK,GACHzB,KAAKN,IAAI,wBACTM,KAAKR,OAAOwC,OAAOhC,KAAKR,OAAOwC,SAAW,IAC1C,MAEF,KAAK,GACHhC,KAAKN,IAAI,2BACTM,KAAKR,OAAOwC,OAAOhC,KAAKR,OAAOwC,SAAW,O,4BAK9C,SAAgBC,GACD,MAATA,GAAuC,mBAAfA,EAAMC,MAChCD,EAAMC,KAAK,MAAM,SAAU/B,W,GArIRhB,GA2IzBI,EAAW4C,aAAe,GAG1B5C,EAAW6C,QAAU,QAGrBhD,yBAAuB,aAAcG,GAErC","file":"videojs-nfb-hotkeys.cd41533de75e04ec46cd.js","sourcesContent":["import videojs from 'video.js'\n\nconst Plugin = videojs.getPlugin('plugin')\n\n// Default options for the plugin.\nconst defaults = {\n  autofocus: false\n}\n\n/**\n * An advanced Video.js plugin. For more information on the API\n *\n * See: https://blog.videojs.com/feature-spotlight-advanced-plugins/\n */\nclass NFBHotKeys extends Plugin {\n  /**\n   * Create a NFBHotKeys plugin instance.\n   *\n   * @param  {Player} player\n   *         A Video.js Player instance.\n   *\n   * @param  {Object} [options]\n   *         An optional options object.\n   *\n   *         While not a core part of the Video.js plugin architecture, a\n   *         second argument of options is a convenient way to accept inputs\n   *         from your plugin's caller.\n   */\n  constructor (player, options) {\n    // the parent class will add player under this.player\n    super(player)\n    this.log.level(videojs.log.level())\n\n    this.options = videojs.mergeOptions(defaults, options)\n    this.keyDown = this.keyDown.bind(this)\n\n    this.player.ready(() => {\n      this.init()\n    })\n  }\n\n  init () {\n    this.log('Initializing NFB Hot Keys plugin')\n\n    // hotkey work only if player is focused\n    this.player.on('keydown', this.keyDown)\n\n    if (this.options.autofocus) {\n      this.player.focus()\n    }\n  }\n\n  keyDown (e) {\n    const evt = e || window.event\n    const charCode = evt.keyCode || evt.which\n\n    // hot keys only works if controls enabled\n    if (this.player.controls()) {\n      const activeEl = document.activeElement\n      if (activeEl === this.player.el() ||\n          activeEl === this.player.el().querySelector('.vjs-tech') ||\n          activeEl === this.player.el().querySelector('.vjs-control-bar') ||\n          activeEl === this.player.el().querySelector('.iframeblocker')) {\n        this.log(`Key down: ${charCode}`)\n        this.applyHotkeyAction(charCode, evt.preventDefault.bind(evt))\n      }\n    }\n  }\n\n  applyHotkeyAction (keyId, ePreventDefault) {\n    let wasPlaying, seekTime\n    const duration = this.player.duration()\n    ePreventDefault()\n\n    switch (keyId) {\n    // Press spacebar key to play/pause\n    case 32:\n      this.log('Spacebar is pressed')\n      if (this.player.paused()) {\n        this.silencePromise(this.player.play())\n      } else {\n        this.player.pause()\n      }\n      break\n      // Press F key to fullscreen/exit fullscreen\n    case 70:\n      this.log('F key is pressed')\n      if (this.player.isFullscreen()) {\n        this.player.exitFullscreen()\n      } else {\n        this.player.requestFullscreen()\n      }\n      break\n      // Press M key to muted/unmuted\n    case 77:\n      this.log('M button is pressed')\n      this.player.muted(!this.player.muted())\n      break\n      // Press left arrow key to seek backward 5s\n    case 37:\n      this.log('Left arrow button is pressed')\n      wasPlaying = !this.player.paused()\n      if (wasPlaying) {\n        this.player.pause()\n      }\n      seekTime = this.player.currentTime() - 5\n      // cant seek to negative time\n      if (seekTime <= 0) {\n        seekTime = 0\n      }\n      this.player.currentTime(seekTime)\n      if (wasPlaying) {\n        this.silencePromise(this.player.play())\n      }\n      break\n      // Press right arrow key to seek forward 5s\n    case 39:\n      this.log('Right arrow is pressed')\n      wasPlaying = !this.player.paused()\n      if (wasPlaying) {\n        this.player.pause()\n      }\n      seekTime = this.player.currentTime() + 5\n      // cant seek to negative time\n      if (seekTime >= duration) {\n        seekTime = wasPlaying ? duration - 0.001 : duration\n      }\n      this.player.currentTime(seekTime)\n      if (wasPlaying) {\n        this.silencePromise(this.player.play())\n      }\n      break\n      // Press top arrow key to increased volume\n    case 38:\n      this.log('Top arrow is pressed')\n      this.player.volume(this.player.volume() + 0.1)\n      break\n      // Press bottom arrow key to decreased volume\n    case 40:\n      this.log('Bottom arrow is pressed')\n      this.player.volume(this.player.volume() - 0.1)\n      break\n    }\n  }\n\n  silencePromise (value) {\n    if (value != null && typeof value.then === 'function') {\n      value.then(null, function (e) {})\n    }\n  }\n}\n\n// Define default values for the plugin's `state` object here.\nNFBHotKeys.defaultState = {}\n\n// Include the version number.\nNFBHotKeys.VERSION = '1.0.0'\n\n// Register the plugin with video.js.\nvideojs.registerPlugin('nfbHotKeys', NFBHotKeys)\n\nexport default NFBHotKeys\n"],"sourceRoot":""}